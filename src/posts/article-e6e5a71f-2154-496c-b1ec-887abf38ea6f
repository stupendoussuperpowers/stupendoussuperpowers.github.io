[{"name":"blocks.0","value":{"id":"id_601070.8722090176","rawText":"## Motivation\n\nThis blog is presented to you by the usual suspects - the innate need to build your own tools, the addictiveness of coding for the web, and a lot of free time to kill after finals week. For years now, I've wanted to get into technical writing. While I do maintain a Wordpress which is reserved for non-technical writing, I wanted my technical entries to be hosted on my own website. There's a few ways to achieve this, but I wanted to choose the path which could to the best of it's abilities mimic the easy to use UX that Wordpress provides, so that the friction between thought-to-words-to-push is as minimal as possible. In essence I wanted something that:","renderText":"<h2>Motivation</h2>\n<p>This blog is presented to you by the usual suspects - the innate need to build your own tools, the addictiveness of coding for the web, and a lot of free time to kill after finals week. For years now, I've wanted to get into technical writing. While I do maintain a Wordpress which is reserved for non-technical writing, I wanted my technical entries to be hosted on my own website. There's a few ways to achieve this, but I wanted to choose the path which could to the best of it's abilities mimic the easy to use UX that Wordpress provides, so that the friction between thought-to-words-to-push is as minimal as possible. In essence I wanted something that:</p>\n","isEditing":false},"rawText":"## Motivation\n\nThis blog is presented to you by the usual suspects - the innate need to build your own tools, the addictiveness of coding for the web, and a lot of free time to kill after finals week. For years now, I've wanted to get into technical writing. ","renderText":"<h2>Motivation</h2>\n<p>This blog is presented to you by the usual suspects - the innate need to build your own tools, the addictiveness of coding for the web, and a lot of free time to kill after finals week. For years now, I've wanted to get into technical writing.</p>\n"},{"id":"id_792973.6329712212","rawText":"\nWhile I do maintain a Wordpress which is reserved for non-technical writing, I wanted my technical entries to be hosted on my own website. There's a few ways to achieve this, but I wanted to choose the path which could to the best of it's abilities mimic the easy to use UX that Wordpress provides, so that the friction between thought-to-words-to-push is as minimal as possible. In essence I wanted something that:","renderText":"<p>While I do maintain a Wordpress which is reserved for non-technical writing, I wanted my technical entries to be hosted on my own website. There's a few ways to achieve this, but I wanted to choose the path which could to the best of it's abilities mimic the easy to use UX that Wordpress provides, so that the friction between thought-to-words-to-push is as minimal as possible. In essence I wanted something that:</p>\n"},{"id":"id_342070.1530821719","rawText":"- Has its own dedicated editor instead of having to write using a .docx editor and then importing it. \n- Comes with handy formatting options. \n- Does not need a manual edit to post indexes.\n- Has an option to save drafts, edit existing posts, change visibility etc.\n\nEssentially, a very simple CMS, which can be run using a single `npm run dev` on your machine and updated using a simple `git push origin main` once you're done with your changes. ","renderText":"<ul>\n<li>Has its own dedicated editor instead of having to write using a .docx editor and then importing it.</li>\n<li>Comes with handy formatting options.</li>\n<li>Does not need a manual edit to post indexes.</li>\n<li>Has an option to save drafts, edit existing posts, change visibility etc.</li>\n</ul>\n<p>Essentially, a very simple CMS, which can be run using a single <code>npm run dev</code> on your machine and updated using a simple <code>git push origin main</code> once you're done with your changes.</p>\n","isEditing":false},{"id":"id_546581.9366797565","rawText":"## Why Markdown\n\nWriting a frontend for a custom editor gave me intense war flashbacks from my time at LegalAI. At the time, one of my tasks was to build a \"simple\" interface for a editor similar to Google Docs which was secretly a template engine. The flow went something like this: A lawyer write up a legal document, you import it to the web app where you have easy options to add variables using the specifics of the case, you then save this to be used for their particular flows. Building this simple interface taught me three things: building software is complicated, RichText is a nightmare the libraries for which are not customizable requiring you to use very specific hacks to get it to work, and that building software is complicated when you are working with libraries that are for the most part an opaque blackbox. ","renderText":"<h2>Why Markdown</h2>\n<p>Writing a frontend for a custom editor gave me intense war flashbacks from my time at LegalAI. At the time, one of my tasks was to build a &quot;simple&quot; interface for a editor similar to Google Docs which was secretly a template engine. The flow went something like this: A lawyer write up a legal document, you import it to the web app where you have easy options to add variables using the specifics of the case, you then save this to be used for their particular flows. Building this simple interface taught me three things: building software is complicated, RichText is a nightmare the libraries for which are not customizable requiring you to use very specific hacks to get it to work, and that building software is complicated when you are working with libraries that are for the most part an opaque blackbox.</p>\n","isEditing":false},{"id":"id_409325.7894409501","rawText":"I wanted to get rid of all this complexity, and use something simple - Markdown. All the raw text doesn't need additional tooling to store, read, or parse. I am not a lawyer who is dependent on .docx or .pdf for writing my blogs. Converting raw Markdown to a displayable HTML is trivial.","renderText":"<p>I wanted to get rid of all this complexity, and use something simple - Markdown. All the raw text doesn't need additional tooling to store, read, or parse. I am not a lawyer who is dependent on .docx or .pdf for writing my blogs. Converting raw Markdown to a displayable HTML is trivial.</p>\n","isEditing":true},{"id":"id_939870.5838180445","rawText":"## FS as DB\n\nAnother aspect of this project that came in handy is the fact that it's hosted as a static site. While I do need to store all my drafts and published posts somewhere, it's not necessary for me to have the overhead of configuring and managing a Database when a simple set of queries to the Filesystem does the trick. \n\n","renderText":"<h2>FS as DB</h2>\n<p>Another aspect of this project that came in handy is the fact that it's hosted as a static site. While I do need to store all my drafts and published posts somewhere, it's not necessary for me to have the overhead of configuring and managing a Database when a simple set of queries to the Filesystem does the trick.</p>\n","isEditing":false},{"id":"id_97986.64924436185","rawText":"There exists a single index.json file that stores an array of all the posts that I have, and individual .json files that store each of the posts in a format similar to how .ipynb files are stored. \n\nThe user interface is similar to how a Jupyter notebook works too, there are independent cells that contain markdown, once you `Shift + Enter`, it parses the markdown to HTML so that you get a WYSIWYG experience. ","renderText":"<p>There exists a single index.json file that stores an array of all the posts that I have, and individual .json files that store each of the posts in a format similar to how .ipynb files are stored.</p>\n<p>The user interface is similar to how a Jupyter notebook works too, there are independent cells that contain markdown, once you <code>Shift + Enter</code>, it parses the markdown to HTML so that you get a WYSIWYG experience.</p>\n","isEditing":false},{"id":"id_625115.1414655686","rawText":"## Future Work?\n\n- Polish up the UI to be more seamless, currently there are a lot of edge-case bugs with the CSS.\n- Add support for images, and header images.\n- Add support to import PDF or .tex files so that project reports can be more easily displayed.\n- Use this blog enough to find out more quality of life improvements!\n\nThe source code for the blog specific part of the project can be seen here:\n\n[UI](https://github.com/stupendoussuperpowers/stupendoussuperpowers.github.io/tree/main/src/app/writepad)\n\n[Blog Engine APIs](https://github.com/stupendoussuperpowers/stupendoussuperpowers.github.io/tree/main/src/utils)","renderText":"<h2>Future Work?</h2>\n<ul>\n<li>Polish up the UI to be more seamless, currently there are a lot of edge-case bugs with the CSS.</li>\n<li>Add support for images, and header images.</li>\n<li>Add support to import PDF or .tex files so that project reports can be more easily displayed.</li>\n<li>Use this blog enough to find out more quality of life improvements!</li>\n</ul>\n<p>The source code for the blog specific part of the project can be seen here:</p>\n<p><a href=\"https://github.com/stupendoussuperpowers/stupendoussuperpowers.github.io/tree/main/src/app/writepad\">UI</a></p>\n<p><a href=\"https://github.com/stupendoussuperpowers/stupendoussuperpowers.github.io/tree/main/src/utils\">Blog Engine APIs</a></p>\n","isEditing":false},{"id":"id_902828.8453026678","rawText":"Is this a test? I guess it is? Editing it still works, ","renderText":"<p>Is this a test? I guess it is? Editing it still works,</p>\n"},{"id":"id_458667.61832445726","rawText":"I guess it was a setValue problem. Even this works? Let's see...","renderText":"<p>I guess it was a setValue problem. Even this works? Let's see...</p>\n"},{"name":"blocks.9","value":{"name":"blocks.9","value":{"id":"id_795010.3840211577","rawText":"## Update Log\n\n- I transitioned the WritePad to react-hook-forms, say goodbye to weirdly disjointed state management!","renderText":"<h2>Update Log</h2>\n<ul>\n<li>I transitioned the WritePad to react-hook-forms, say goodbye to weirdly disjointed state management!</li>\n</ul>\n"},"rawText":"## Update Log\n\n- I transitioned the WritePad to react-hook-forms, say goodbye to weirdly disjointed state management!\n- Added a support for manual inclusions of header images. (As you can hopefully see, it supports gifs as well)\n- QOL onInput updates for the text boxes. ","renderText":"<h2>Update Log</h2>\n<ul>\n<li>I transitioned the WritePad to react-hook-forms, say goodbye to weirdly disjointed state management!</li>\n<li>Added a support for manual inclusions of header images. (As you can hopefully see, it supports gifs as well)</li>\n<li>QOL onInput updates for the text boxes.</li>\n</ul>\n"},"rawText":"## Update Log\n\n- I transitioned the WritePad to react-hook-forms, say goodbye to weirdly disjointed state management!\n- Added a support for manual inclusions of header images. (As you can hopefully see, it supports gifs as well)\n- QOL onInput updates for the text boxes. ","renderText":"<h2>Update Log</h2>\n<ul>\n<li>I transitioned the WritePad to react-hook-forms, say goodbye to weirdly disjointed state management!</li>\n<li>Added a support for manual inclusions of header images. (As you can hopefully see, it supports gifs as well)</li>\n<li>QOL onInput updates for the text boxes.</li>\n</ul>\n"},{"id":"id_134620.48879342558","rawText":"\n","renderText":""},{"id":"id_271186.60265046166","rawText":"\n","renderText":""},{"id":"id_769995.0671993872","rawText":"\n","renderText":""},{"id":"id_786168.6917184178","rawText":"\n","renderText":""}]